/**
 * @file Overview
 * This ruleset enforces a security model that mixes public data access with user-specific private data.
 *
 * @data_structure
 * - `/prodotti/{productId}`: Public product catalog.
 * - `/testimonials/{testimonialId}`: Public testimonials.
 * - `/quoteRequests/{quoteRequestId}`: Public quote requests.
 * - `/users/{userId}`: Private user profiles, accessible only by the authenticated user.
 *
 * @key_security_decisions
 * - Public read access for products and testimonials.
 * - Quote requests are publicly writeable (no auth needed).
 * - Strict user-ownership model for user profiles.
 * - User listing is disabled.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to product information.
     * @path /prodotti/{prodottoId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No one can create, update, or delete products via the client.
     * @principle Public read access.
     */
    match /prodotti/{prodottoId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to testimonials.
     * @path /testimonials/{testimonialId}
     * @allow (get, list): Any user can read testimonial information.
     * @deny (create, update, delete): No one can create, update, or delete testimonials via the client.
     * @principle Public read access.
     */
    match /testimonials/{testimonialId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public write access to quote requests.
     * @path /quoteRequests/{quoteRequestId}
     * @allow (create): Any user can submit a quote request.
     * @deny (get, list, update, delete): No one can read, list, update, or delete quote requests via the client.
     * @principle Public write access for submitting quote requests.
     */
    match /quoteRequests/{quoteRequestId} {
      allow create: if true;
      allow get, list, update, delete: if false;
    }

    /**
     * @description Manages user account information.
     * @path /users/{userId}
     * @allow (create): An authenticated user can create their own user document (self-registration).
     * @allow (get, update, delete): An authenticated user can only access and modify their own user document.
     * @deny (list): User listing is not allowed.
     * @deny (create): An unauthenticated user cannot create a user document.
     * @deny (update, delete): An authenticated user cannot modify another user's document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}